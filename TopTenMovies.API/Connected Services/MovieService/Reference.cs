//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TopTenMovies.API.MovieService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovieService.IMovieService")]
    public interface IMovieService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetMovies", ReplyAction="http://tempuri.org/IMovieService/GetMoviesResponse")]
        TopTenMovies.Entities.Movie[] GetMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetMovies", ReplyAction="http://tempuri.org/IMovieService/GetMoviesResponse")]
        System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> GetMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/AddMovie", ReplyAction="http://tempuri.org/IMovieService/AddMovieResponse")]
        void AddMovie(TopTenMovies.Entities.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/AddMovie", ReplyAction="http://tempuri.org/IMovieService/AddMovieResponse")]
        System.Threading.Tasks.Task AddMovieAsync(TopTenMovies.Entities.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/FilterMoviesBy", ReplyAction="http://tempuri.org/IMovieService/FilterMoviesByResponse")]
        TopTenMovies.Entities.Movie[] FilterMoviesBy(System.Func<TopTenMovies.Entities.Movie, bool> filterCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/FilterMoviesBy", ReplyAction="http://tempuri.org/IMovieService/FilterMoviesByResponse")]
        System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> FilterMoviesByAsync(System.Func<TopTenMovies.Entities.Movie, bool> filterCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetOrderedMoviesByRate", ReplyAction="http://tempuri.org/IMovieService/GetOrderedMoviesByRateResponse")]
        TopTenMovies.Entities.Movie[] GetOrderedMoviesByRate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/GetOrderedMoviesByRate", ReplyAction="http://tempuri.org/IMovieService/GetOrderedMoviesByRateResponse")]
        System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> GetOrderedMoviesByRateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/FilterMoviesByGenre", ReplyAction="http://tempuri.org/IMovieService/FilterMoviesByGenreResponse")]
        TopTenMovies.Entities.Movie[] FilterMoviesByGenre(byte genreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieService/FilterMoviesByGenre", ReplyAction="http://tempuri.org/IMovieService/FilterMoviesByGenreResponse")]
        System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> FilterMoviesByGenreAsync(byte genreID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieServiceChannel : TopTenMovies.API.MovieService.IMovieService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieServiceClient : System.ServiceModel.ClientBase<TopTenMovies.API.MovieService.IMovieService>, TopTenMovies.API.MovieService.IMovieService {
        
        public MovieServiceClient() {
        }
        
        public MovieServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TopTenMovies.Entities.Movie[] GetMovies() {
            return base.Channel.GetMovies();
        }
        
        public System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> GetMoviesAsync() {
            return base.Channel.GetMoviesAsync();
        }
        
        public void AddMovie(TopTenMovies.Entities.Movie movie) {
            base.Channel.AddMovie(movie);
        }
        
        public System.Threading.Tasks.Task AddMovieAsync(TopTenMovies.Entities.Movie movie) {
            return base.Channel.AddMovieAsync(movie);
        }
        
        public TopTenMovies.Entities.Movie[] FilterMoviesBy(System.Func<TopTenMovies.Entities.Movie, bool> filterCondition) {
            return base.Channel.FilterMoviesBy(filterCondition);
        }
        
        public System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> FilterMoviesByAsync(System.Func<TopTenMovies.Entities.Movie, bool> filterCondition) {
            return base.Channel.FilterMoviesByAsync(filterCondition);
        }
        
        public TopTenMovies.Entities.Movie[] GetOrderedMoviesByRate() {
            return base.Channel.GetOrderedMoviesByRate();
        }
        
        public System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> GetOrderedMoviesByRateAsync() {
            return base.Channel.GetOrderedMoviesByRateAsync();
        }
        
        public TopTenMovies.Entities.Movie[] FilterMoviesByGenre(byte genreID) {
            return base.Channel.FilterMoviesByGenre(genreID);
        }
        
        public System.Threading.Tasks.Task<TopTenMovies.Entities.Movie[]> FilterMoviesByGenreAsync(byte genreID) {
            return base.Channel.FilterMoviesByGenreAsync(genreID);
        }
    }
}
